AWSTemplateFormatVersion : 2010-09-09
Description: Test Template

Parameters:
  Name:
    Description: Input Name
    Type: String

Resources:
  LambdaAMIInfoRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: LambdaBasicExecRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeImagePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeImages
                Resource: "*"
  LambdaAMIInfo:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              if event['RequestType'] == 'Delete':
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              response_data = {}
              filters = [
                  {'Name': 'architecture', 'Values': ['x86_64']},
                  {'Name': 'root-device-type', 'Values': ['ebs']},
                  {'Name': 'name', 'Values': [event['ResourceProperties']['Name']]},
                  {'Name': 'virtualization-type', 'Values': ['hvm']},
                  {'Name': 'block-device-mapping.volume-type', 'Values': ['gp2']}]
              try:
                  images = boto3.client('ec2').describe_images(Owners=['amazon'], Filters=filters)
              except Exception as e:
                  response_data = {'Error': e['Response']['Message']}
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
              for i in sorted([image for image in images['Images']], key=lambda x: x['Name']):
                  if i['Name'].lower().count('beta') > 0 or i['Name'].lower().count('.rc') > 0:
                      continue
                  response_data['Id'] = i['ImageId']
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
      Handler: index.handler
      Role: !GetAtt LambdaAMIInfoRole.Arn
      Runtime: python2.7
      Timeout: 20
  CustomAMIInfo:
    Type: Custom::AMIInfo
    Version: 1.0
    Properties:
      ServiceToken: !GetAtt LambdaAMIInfo.Arn
      Name: !Ref Name

Outputs:
  AMIId:
    Value: !GetAtt CustomAMIInfo.Id
